import java.util.ArrayList;
import java.util.Scanner;

public class EmployeeManagement {

    // Employee class to represent an employee
    static class Employee {
        private int id;
        private String name;
        private double salary;

        // Constructor to initialize employee details
        public Employee(int id, String name, double salary) {
            this.id = id;
            this.name = name;
            this.salary = salary;
        }

        // Getter and Setter methods
        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public double getSalary() {
            return salary;
        }

        public void setSalary(double salary) {
            this.salary = salary;
        }

        // toString method to display employee details
        @Override
        public String toString() {
            return "Employee ID: " + id + ", Name: " + name + ", Salary: $" + salary;
        }
    }

    // Main method for the employee management system
    public static void main(String[] args) {
        ArrayList<Employee> employees = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nEmployee Management System");
            System.out.println("1. Add Employee");
            System.out.println("2. Update Employee");
            System.out.println("3. Remove Employee");
            System.out.println("4. Search Employee");
            System.out.println("5. Display All Employees");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // consume the newline character

            switch (choice) {
                case 1:
                    addEmployee(employees, scanner);
                    break;
                case 2:
                    updateEmployee(employees, scanner);
                    break;
                case 3:
                    removeEmployee(employees, scanner);
                    break;
                case 4:
                    searchEmployee(employees, scanner);
                    break;
                case 5:
                    displayEmployees(employees);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 6);
        
        scanner.close();
    }

    // Add an employee
    private static void addEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // consume newline
        System.out.print("Enter Employee Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Employee Salary: ");
        double salary = scanner.nextDouble();

        Employee employee = new Employee(id, name, salary);
        employees.add(employee);
        System.out.println("Employee added successfully.");
    }

    // Update an employee's details
    private static void updateEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID to update: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // consume newline
        boolean found = false;

        for (Employee employee : employees) {
            if (employee.getId() == id) {
                System.out.print("Enter new Name: ");
                String name = scanner.nextLine();
                System.out.print("Enter new Salary: ");
                double salary = scanner.nextDouble();

                employee.setName(name);
                employee.setSalary(salary);
                System.out.println("Employee updated successfully.");
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Employee with ID " + id + " not found.");
        }
    }

    // Remove an employee by ID
    private static void removeEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID to remove: ");
        int id = scanner.nextInt();
        boolean removed = false;

        for (Employee employee : employees) {
            if (employee.getId() == id) {
                employees.remove(employee);
                System.out.println("Employee removed successfully.");
                removed = true;
                break;
            }
        }

        if (!removed) {
            System.out.println("Employee with ID " + id + " not found.");
        }
    }

    // Search for an employee by ID
    private static void searchEmployee(ArrayList<Employee> employees, Scanner scanner) {
        System.out.print("Enter Employee ID to search: ");
        int id = scanner.nextInt();
        boolean found = false;

        for (Employee employee : employees) {
            if (employee.getId() == id) {
                System.out.println("Employee Found: " + employee);
                found = true;
                break;
            }
        }

        if (!found) {
            System.out.println("Employee with ID " + id + " not found.");
        }
    }

    // Display all employees
    private static void displayEmployees(ArrayList<Employee> employees) {
        if (employees.isEmpty()) {
            System.out.println("No employees to display.");
        } else {
            System.out.println("\nList of Employees:");
            for (Employee employee : employees) {
                System.out.println(employee);
            }
        }
    }
}
